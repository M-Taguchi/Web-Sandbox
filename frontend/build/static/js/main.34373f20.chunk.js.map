{"version":3,"sources":["hooks/useAuth.tsx","hooks/useInternalApi.tsx","components/atoms/Icon.tsx","components/atoms/Card.tsx","components/atoms/FormTextField.tsx","components/molecules/modal/createModal.tsx","components/molecules/modal/deleteModal.tsx","components/organisms/board.tsx","components/pages/kanban.tsx","container/kanban/kanbanContainer.tsx","components/atoms/FormPasswordField.tsx","components/pages/login.tsx","container/login/loginContainer.tsx","components/organisms/appbar.tsx","container/appbarContainer.tsx","container/auth/privateRoute.tsx","theme.ts","App.js","reportWebVitals.js","index.js"],"names":["defaultContext","jwtCsrf","setJwtCsrf","authContext","createContext","AuthProvider","children","useState","localStorage","getItem","Provider","value","useAuth","useContext","_post","_get","_delete","apiContext","axios","defaults","withCredentials","baseURL","process","ApiProvider","url","data","addHeaders","a","post","headers","catch","e","console","log","response","body","delete","params","useSWR","get","then","res","suspense","error","mutate","fetch","useInternalApi","Icon","icon","props","w","h","as","Card","header","content","handleDeleteCard","borderWidth","borderRadius","p","justifyContent","alignItems","fontWeight","fontSize","color","onClick","MdClose","FormTextField","name","label","placeholder","multiple","defaultValue","minLength","maxLength","required","validate","pattern","inputLeftElement","inputRightElement","isValidate","useFormContext","register","errors","formState","isInvalid","htmlFor","message","mb","mt","CreateModal","isOpen","onClose","onSubmit","minH","display","pt","pb","colorScheme","DeleteModal","Board","title","cards","categoryId","handlers","isOpenDeleteModal","setIsOpenDeleteModal","isOpenCreateModal","setIsOpenCreateModal","onCloseCreateModal","handleCreateCard","reset","m","overflow","spacing","pl","alert","map","card","index","cardTitle","cardContent","cardId","leftIcon","MdAdd","type","Kanban","categorys","category","categoryName","KanbanContainer","methods","useForm","handleSubmit","toast","useNavigate","useToast","kanban","setCategorys","useEffect","request","position","status","isClosable","show","setShow","variant","MdVisibility","MdVisibilityOff","Login","handleLogin","isSubmitting","bg","textAlign","margin","minW","maxW","maxH","gap","direction","FormPasswordField","isLoading","LoginContainer","navigate","accessCsrf","setItem","Appbar","handleLogout","setIsOpen","MdMenu","placement","pointerEvents","MdSearch","_hover","ReactRouterLink","to","MdHome","MdLogout","AppbarContainer","removeItem","PrivateRoute","setIsLoading","finally","theme","extendTheme","components","Drawer","variants","alwaysOpen","parts","dialog","dialogContainer","App","resetCSS","fallback","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.34373f20.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\r\n\r\ntype AuthContext = {\r\n  jwtCsrf: string;\r\n  setJwtCsrf: (jwtCsrf: string) => void;\r\n};\r\n\r\nconst defaultContext: AuthContext = {\r\n  jwtCsrf: \"\",\r\n  setJwtCsrf: () => {},\r\n};\r\n\r\nconst authContext = createContext<AuthContext>(defaultContext);\r\n\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n  const [jwtCsrf, setJwtCsrf] = useState(\r\n    localStorage.getItem(\"accessCsrf\") || \"\"\r\n  );\r\n\r\n  return (\r\n    <authContext.Provider value={{ jwtCsrf, setJwtCsrf }}>\r\n      {children}\r\n    </authContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(authContext);","import axios, { AxiosResponse } from \"axios\";\r\nimport { createContext, useContext } from \"react\";\r\nimport { BaseResponse } from \"../types/internalApi\";\r\nimport { useAuth } from \"./useAuth\";\r\nimport useSWR from \"swr\";\r\n\r\ntype ApiContext = {\r\n  // TODO: any修正\r\n  _post: (url: string, data?: object, addHeaders?: object) => any;\r\n  _get: (url: string, params?: object) => any;\r\n  _delete: (url: string, data?: object) => any;\r\n};\r\n\r\nconst defaultContext: ApiContext = {\r\n  _post: () => [],\r\n  _get: () => [],\r\n  _delete: () => [],\r\n};\r\n\r\nconst apiContext = createContext<ApiContext>(defaultContext);\r\n\r\n// TODO: 以下のaxiosの設定を環境変数に変更\r\nif (process.env.NODE_ENV === \"development\") {\r\n  axios.defaults.withCredentials = true;\r\n  axios.defaults.baseURL = process.env.REACT_APP_DEV_API_URL;\r\n} else {\r\n  axios.defaults.withCredentials = false;\r\n  axios.defaults.baseURL = process.env.REACT_APP_PROD_API_URL;\r\n}\r\n\r\nexport const ApiProvider: React.FC = ({ children }) => {\r\n  const { jwtCsrf } = useAuth();\r\n\r\n  const _get = (url: string, params?: object) => {\r\n    const fetcher = () =>\r\n      axios.get(url, { params: params }).then((res) => res.data.body);\r\n\r\n    //@ts-ignore\r\n    const { data, error, mutate } = useSWR(url, fetcher, { suspense: true });\r\n\r\n    if (error) throw error;\r\n\r\n    return { data, fetch: mutate };\r\n  };\r\n\r\n  const _post = async (url: string, data?: object, addHeaders?: object) => {\r\n    const response = await axios\r\n      .post<BaseResponse>(url, data, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"X-CSRF-TOKEN\": jwtCsrf,\r\n          ...addHeaders,\r\n        },\r\n      })\r\n      .catch((e: any) => {\r\n        console.log(\"エラー\");\r\n        throw e;\r\n      });\r\n\r\n    return response.data.body;\r\n  };\r\n\r\n  const _delete = async (url: string, data?: object) => {\r\n    const response = await axios\r\n      .delete<BaseResponse>(url, { data: data })\r\n      .catch((e: any) => {\r\n        console.log(\"エラー\");\r\n        throw e;\r\n      });\r\n\r\n    return response.data.body;\r\n  };\r\n\r\n  return (\r\n    <apiContext.Provider value={{ _post, _get, _delete }}>\r\n      {children}\r\n    </apiContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useInternalApi = () => useContext(apiContext);\r\n","import {\r\n  Icon as ChakraIcon,\r\n  IconProps as ChakraIconProps,\r\n} from \"@chakra-ui/react\";\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface IconProps extends ChakraIconProps {\r\n  icon: IconType;\r\n}\r\n\r\nconst Icon: React.FC<IconProps> = ({ icon, ...props }) => {\r\n  return (\r\n    <>\r\n      <ChakraIcon {...props} w={6} h={6} as={icon} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Icon;\r\n","import { Box, Text, Stack, Flex, CloseButton } from \"@chakra-ui/react\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport Icon from \"./Icon\";\r\n\r\ntype CardProps = {\r\n  header?: string;\r\n  content: string;\r\n  handleDeleteCard: () => void;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({ header, content, handleDeleteCard }) => {\r\n  return (\r\n    <>\r\n      {/* カード */}\r\n      <Stack w={\"100%\"} borderWidth=\"1px\" borderRadius=\"lg\" p={3}>\r\n        {/* ヘッダー */}\r\n        <Flex justifyContent={\"space-between\"} alignItems={\"center\"}>\r\n          <Text fontWeight=\"bold\" fontSize=\"lg\" color=\"teal.600\">\r\n            {header}\r\n          </Text>\r\n          <CloseButton onClick={() => handleDeleteCard()}>\r\n            <Icon icon={MdClose} />\r\n          </CloseButton>\r\n        </Flex>\r\n        {/* 内容 */}\r\n        <Box>\r\n          <Text>{content}</Text>\r\n        </Box>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import {\r\n  Box,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  InputRightElement,\r\n  Textarea,\r\n} from \"@chakra-ui/react\";\r\nimport { ReactElement } from \"react\";\r\nimport { useFormContext, Validate, ValidationRule } from \"react-hook-form\";\r\n\r\ntype FormTextFieldProps = {\r\n  name: string;\r\n  label?: string;\r\n  placeholder?: string;\r\n  defaultValue?: string;\r\n  multiple?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  required?: boolean;\r\n  validate?: Validate<any>;\r\n  pattern?: ValidationRule<RegExp>;\r\n  inputLeftElement?: ReactElement;\r\n  inputRightElement?: ReactElement;\r\n  isValidate?: boolean;\r\n};\r\n\r\nconst FormTextField: React.FC<FormTextFieldProps> = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  multiple = false,\r\n  defaultValue = \"\",\r\n  minLength,\r\n  maxLength,\r\n  required,\r\n  validate,\r\n  pattern,\r\n  inputLeftElement,\r\n  inputRightElement,\r\n  isValidate = true,\r\n}) => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext();\r\n\r\n  return (\r\n    <>\r\n      <FormControl isInvalid={errors[name]}>\r\n        {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\r\n        <InputGroup>\r\n          {inputLeftElement && (\r\n            <InputLeftElement>{inputLeftElement}</InputLeftElement>\r\n          )}\r\n\r\n          {multiple ? (\r\n            <Textarea\r\n              {...register(name, {\r\n                minLength: minLength && {\r\n                  value: minLength,\r\n                  message: `${minLength}文字以下で入力してください`,\r\n                },\r\n                maxLength: maxLength && {\r\n                  value: maxLength,\r\n                  message: `${maxLength}文字以上で入力してください`,\r\n                },\r\n                required: required && \"必須項目です\",\r\n                pattern: pattern,\r\n                validate: validate,\r\n              })}\r\n              placeholder={placeholder}\r\n              defaultValue={defaultValue}\r\n            />\r\n          ) : (\r\n            <Input\r\n              {...register(name, {\r\n                minLength: minLength && {\r\n                  value: minLength,\r\n                  message: `${minLength}文字以下で入力してください`,\r\n                },\r\n                maxLength: maxLength && {\r\n                  value: maxLength,\r\n                  message: `${maxLength}文字以上で入力してください`,\r\n                },\r\n                required: required && \"必須項目です\",\r\n                pattern: pattern,\r\n                validate: validate,\r\n              })}\r\n              placeholder={placeholder}\r\n              defaultValue={defaultValue}\r\n            />\r\n          )}\r\n\r\n          {inputRightElement && (\r\n            <InputRightElement>{inputRightElement}</InputRightElement>\r\n          )}\r\n        </InputGroup>\r\n        {isValidate &&\r\n          (errors[name] ? (\r\n            <FormErrorMessage mb={2}>{errors[name].message}</FormErrorMessage>\r\n          ) : (\r\n            <Box h={\"21px\"} mt={2} mb={2}></Box>\r\n          ))}\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormTextField;\r\n","import {\r\n  Button,\r\n  CloseButton,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport Icon from \"../../atoms/Icon\";\r\nimport { ReactElement } from \"react\";\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\ntype CreateModalProps = {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: () => void;\r\n  header?: string;\r\n  content: ReactElement;\r\n};\r\n\r\nconst CreateModal: React.FC<CreateModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  header,\r\n  content,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent minH={60}>\r\n          <ModalHeader display={\"flex\"} justifyContent={\"space-between\"} p={4}>\r\n            {header}\r\n            <CloseButton onClick={onClose}>\r\n              <Icon icon={MdClose} />\r\n            </CloseButton>\r\n          </ModalHeader>\r\n\r\n          <ModalBody pt={0} pb={0}>\r\n            {content}\r\n          </ModalBody>\r\n\r\n          <ModalFooter display={\"flex\"} justifyContent={\"space-between\"} p={4}>\r\n            <Button colorScheme={\"teal\"} onClick={onSubmit}>\r\n              作成\r\n            </Button>\r\n            <Button onClick={onClose}>キャンセル</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateModal;\r\n","import {\r\n  Button,\r\n  CloseButton,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport Icon from \"../../atoms/Icon\";\r\nimport { ReactElement } from \"react\";\r\nimport { MdClose } from \"react-icons/md\";\r\n\r\ntype DeleteModalProps = {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: () => void;\r\n  header?: string;\r\n  content: ReactElement;\r\n};\r\n\r\nconst DeleteModal: React.FC<DeleteModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  header,\r\n  content,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent minH={60}>\r\n          <ModalHeader display={\"flex\"} justifyContent={\"space-between\"} p={4}>\r\n            {header}\r\n            <CloseButton onClick={onClose}>\r\n              <Icon icon={MdClose} />\r\n            </CloseButton>\r\n          </ModalHeader>\r\n\r\n          <ModalBody pt={0} pb={0}>\r\n            {content}\r\n          </ModalBody>\r\n\r\n          <ModalFooter display={\"flex\"} justifyContent={\"space-between\"} p={4}>\r\n            <Button colorScheme={\"red\"} onClick={onSubmit}>\r\n              削除\r\n            </Button>\r\n            <Button onClick={onClose}>キャンセル</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteModal;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  VStack,\r\n  Text,\r\n  Heading,\r\n  CloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { useFormContext } from \"react-hook-form\";\r\nimport { MdAdd, MdClose } from \"react-icons/md\";\r\nimport { CardProps } from \"../../types/card\";\r\nimport Card from \"../atoms/Card\";\r\nimport FormTextField from \"../atoms/FormTextField\";\r\nimport Icon from \"../atoms/Icon\";\r\nimport CreateModal from \"../molecules/modal/createModal\";\r\nimport DeleteModal from \"../molecules/modal/deleteModal\";\r\n\r\ntype BoardProps = {\r\n  title?: string;\r\n  cards?: Array<CardProps>;\r\n  categoryId: number;\r\n  handlers: {\r\n    handleCreateCard: () => void;\r\n    handleDeleteCard: (cardId: number) => void;\r\n  };\r\n};\r\n\r\nconst Board: React.FC<BoardProps> = ({\r\n  title,\r\n  cards,\r\n  categoryId,\r\n  handlers,\r\n  ...props\r\n}) => {\r\n  const [isOpenDeleteModal, setIsOpenDeleteModal] = useState(false);\r\n  const [isOpenCreateModal, setIsOpenCreateModal] = useState(false);\r\n  const onOpenDeleteModal = () => setIsOpenDeleteModal(true);\r\n  const onOpenCreateModal = () => setIsOpenCreateModal(true);\r\n  const onCloseDeleteModal = () => setIsOpenDeleteModal(false);\r\n  const onCloseCreateModal = () => setIsOpenCreateModal(false);\r\n\r\n  const { handleCreateCard, handleDeleteCard } = handlers;\r\n\r\n  const { register, reset } = useFormContext();\r\n\r\n  return (\r\n    <>\r\n      {/* ボード */}\r\n      <Box\r\n        m={4}\r\n        p={2}\r\n        w={60}\r\n        h={\"100%\"}\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n      >\r\n        <VStack spacing={2}>\r\n          <Heading w={\"100%\"} pl={2}>\r\n            <Flex justifyContent={\"space-between\"} alignItems={\"center\"}>\r\n              <Text>{title}</Text>\r\n              <CloseButton onClick={onOpenDeleteModal}>\r\n                <Icon icon={MdClose} />\r\n              </CloseButton>\r\n            </Flex>\r\n            {isOpenDeleteModal && (\r\n              <DeleteModal\r\n                header={\"ボードの削除\"}\r\n                content={\r\n                  <Text>\r\n                    選択されたボードを削除します。\r\n                    <br />\r\n                    削除されたボードは復元できません。\r\n                    <br />\r\n                    本当によろしいですか？\r\n                  </Text>\r\n                }\r\n                isOpen={isOpenDeleteModal}\r\n                onClose={onCloseDeleteModal}\r\n                onSubmit={() => alert(\"削除！\")}\r\n              />\r\n            )}\r\n          </Heading>\r\n          {cards &&\r\n            cards.map((card: CardProps, index: number) => {\r\n              return (\r\n                <Card\r\n                  key={index}\r\n                  header={card.cardTitle}\r\n                  content={card.cardContent}\r\n                  handleDeleteCard={() => handleDeleteCard(card.cardId)}\r\n                />\r\n              );\r\n            })}\r\n          <Button\r\n            colorScheme={\"teal\"}\r\n            leftIcon={<Icon icon={MdAdd} />}\r\n            onClick={onOpenCreateModal}\r\n          >\r\n            新規追加\r\n          </Button>\r\n          {isOpenCreateModal && (\r\n            <CreateModal\r\n              header={\"カードの作成\"}\r\n              content={\r\n                <>\r\n                  <FormTextField name={\"cardTitle\"} label={\"タイトル\"} />\r\n                  <FormTextField\r\n                    name={\"cardContent\"}\r\n                    label={\"内容\"}\r\n                    multiple={true}\r\n                  />\r\n                  <input\r\n                    type=\"hidden\"\r\n                    {...register(\"categoryId\", { value: categoryId })}\r\n                  />\r\n                </>\r\n              }\r\n              isOpen={isOpenCreateModal}\r\n              onClose={() => {\r\n                onCloseCreateModal();\r\n                reset();\r\n              }}\r\n              onSubmit={() => {\r\n                handleCreateCard();\r\n                onCloseCreateModal();\r\n                reset();\r\n              }}\r\n            />\r\n          )}\r\n        </VStack>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { Flex } from \"@chakra-ui/react\";\r\nimport { Category } from \"../../types/category\";\r\nimport Board from \"../organisms/board\";\r\n\r\ntype KanbanProps = {\r\n  categorys: Array<Category>;\r\n  handlers: {\r\n    handleCreateCard: () => void;\r\n    handleDeleteCard: (cardId: number) => void;\r\n  };\r\n};\r\n\r\nconst Kanban: React.FC<KanbanProps> = ({ categorys, ...props }) => {\r\n  return (\r\n    <Flex>\r\n      {categorys.map((category: Category, index: number) => {\r\n        return (\r\n          <Board\r\n            key={index}\r\n            title={category.categoryName}\r\n            cards={category.cards}\r\n            categoryId={category.categoryId}\r\n            {...props}\r\n          />\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n","import { useNavigate } from \"react-router-dom\";\r\nimport { useInternalApi } from \"../../hooks/useInternalApi\";\r\nimport { Flex, HStack, useToast } from \"@chakra-ui/react\";\r\nimport Board from \"../../components/organisms/board\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport Kanban from \"../../components/pages/kanban\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CardResponse } from \"../../types/card\";\r\nimport axios from \"axios\";\r\nimport { url } from \"inspector\";\r\nimport { mutate } from \"swr\";\r\n\r\nconst KanbanContainer: React.FC = () => {\r\n  const methods = useForm();\r\n  const { _post, _get, _delete } = useInternalApi();\r\n  const { handleSubmit } = methods;\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n\r\n  const { data, fetch } = _get(\"/kanban/\");\r\n\r\n  const [categorys, setCategorys] = useState(data.kanban);\r\n\r\n  useEffect(() => {\r\n    setCategorys(data.kanban);\r\n  }, [data]);\r\n\r\n  const handleCreateCard = handleSubmit((data) => {\r\n    const request = {\r\n      card: {\r\n        ...data,\r\n      },\r\n    };\r\n    _post(\"/cards\", request)\r\n      .then((response: any) => {\r\n        toast({\r\n          title: \"カードを作成しました\",\r\n          position: \"top\",\r\n          status: \"success\",\r\n          isClosable: true,\r\n        });\r\n\r\n        fetch();\r\n      })\r\n      .catch(() => {\r\n        toast({\r\n          title: \"カード作成に失敗しました\",\r\n          position: \"top\",\r\n          status: \"error\",\r\n          isClosable: true,\r\n        });\r\n      });\r\n  });\r\n\r\n  const handleDeleteCard = (cardId: number) => {\r\n    _delete(`/cards/${cardId}`)\r\n      .then((response: any) => {\r\n        toast({\r\n          title: \"カードを削除しました\",\r\n          position: \"top\",\r\n          status: \"success\",\r\n          isClosable: true,\r\n        });\r\n\r\n        fetch();\r\n      })\r\n      .catch(() => {\r\n        toast({\r\n          title: \"カード削除に失敗しました\",\r\n          position: \"top\",\r\n          status: \"error\",\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const props = {\r\n    categorys,\r\n    handlers: {\r\n      handleCreateCard,\r\n      handleDeleteCard,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormProvider {...methods}>\r\n        <Kanban {...props} />\r\n      </FormProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KanbanContainer;\r\n","import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  InputRightElement,\r\n} from \"@chakra-ui/react\";\r\nimport { ReactElement, useState } from \"react\";\r\nimport { useFormContext, Validate, ValidationRule } from \"react-hook-form\";\r\nimport { MdVisibility, MdVisibilityOff } from \"react-icons/md\";\r\nimport Icon from \"./Icon\";\r\n\r\ntype FormTextFieldProps = {\r\n  name: string;\r\n  label?: string;\r\n  placeholder?: string;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  required?: boolean;\r\n  validate?: Validate<any>;\r\n  pattern?: ValidationRule<RegExp>;\r\n  inputLeftElement?: ReactElement;\r\n  isValidate?: boolean;\r\n};\r\n\r\nconst FormTextField: React.FC<FormTextFieldProps> = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  minLength,\r\n  maxLength,\r\n  required,\r\n  validate,\r\n  pattern,\r\n  inputLeftElement,\r\n  isValidate = true,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n  } = useFormContext();\r\n\r\n  return (\r\n    <>\r\n      <FormControl isInvalid={errors[name]}>\r\n        {label && <FormLabel htmlFor={name}>{label}</FormLabel>}\r\n        <InputGroup>\r\n          {inputLeftElement && (\r\n            <InputLeftElement>{inputLeftElement}</InputLeftElement>\r\n          )}\r\n\r\n          <Input\r\n            {...register(name, {\r\n              minLength: minLength && {\r\n                value: minLength,\r\n                message: `${minLength}文字以下で入力してください`,\r\n              },\r\n              maxLength: maxLength && {\r\n                value: maxLength,\r\n                message: `${maxLength}文字以上で入力してください`,\r\n              },\r\n              required: required && \"必須項目です\",\r\n              pattern: pattern,\r\n              validate: validate,\r\n            })}\r\n            placeholder={placeholder}\r\n            type={show ? \"text\" : \"password\"}\r\n          />\r\n\r\n          <InputRightElement>\r\n            <Button onClick={handleClick} variant={\"ghost\"}>\r\n              {show ? (\r\n                <Icon icon={MdVisibility} />\r\n              ) : (\r\n                <Icon icon={MdVisibilityOff} />\r\n              )}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n        {isValidate &&\r\n          (errors[name] ? (\r\n            <FormErrorMessage mb={2}>{errors[name].message}</FormErrorMessage>\r\n          ) : (\r\n            <Box h={\"21px\"} mt={2} mb={2}></Box>\r\n          ))}\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormTextField;\r\n","import { Box, Button, Heading, Flex, Stack } from \"@chakra-ui/react\";\r\nimport { useFormContext } from \"react-hook-form\";\r\nimport FormTextField from \"../atoms/FormTextField\";\r\nimport FormPasswordField from \"../atoms/FormPasswordField\";\r\n\r\ntype LoginProps = {\r\n  handleLogin: () => void;\r\n};\r\n\r\nconst Login: React.FC<LoginProps> = ({ handleLogin }) => {\r\n  const {\r\n    formState: { isSubmitting },\r\n  } = useFormContext();\r\n\r\n  return (\r\n    <Flex h=\"100vh\" w=\"100%\" bg={\"gray.200\"} textAlign={\"center\"}>\r\n      <Box\r\n        w={\"50%\"}\r\n        h=\"50vh\"\r\n        pt={10}\r\n        margin={\"auto\"}\r\n        bg={\"white\"}\r\n        minW={\"600px\"}\r\n        maxW={\"600px\"}\r\n        minH={\"480px\"}\r\n        maxH={\"480px\"}\r\n      >\r\n        <Flex p={8} gap={10} direction={\"column\"}>\r\n          <Heading textAlign=\"center\">ユーザーログイン</Heading>\r\n          <Stack justifyContent=\"center\" spacing={8}>\r\n            <form onSubmit={handleLogin}>\r\n              <FormTextField\r\n                name={\"userName\"}\r\n                label={\"ユーザー名\"}\r\n                maxLength={20}\r\n              />\r\n              <FormPasswordField\r\n                name={\"password\"}\r\n                label={\"パスワード\"}\r\n                maxLength={20}\r\n              />\r\n              <Button\r\n                mt={4}\r\n                colorScheme=\"teal\"\r\n                isLoading={isSubmitting}\r\n                type=\"submit\"\r\n              >\r\n                ログイン\r\n              </Button>\r\n            </form>\r\n          </Stack>\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useToast } from \"@chakra-ui/react\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Login from \"../../components/pages/login\";\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\nimport { useInternalApi } from \"../../hooks/useInternalApi\";\r\n\r\nconst LoginContainer: React.FC = () => {\r\n  const methods = useForm();\r\n  const { handleSubmit } = methods;\r\n  const { setJwtCsrf } = useAuth();\r\n  const { _post } = useInternalApi();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n\r\n  // 認証系の処理を書く\r\n  const handleLogin = handleSubmit((data) =>\r\n    _post(\"/auth/login\", data)\r\n      .then((response: any) => {\r\n        setJwtCsrf(response.accessCsrf);\r\n        localStorage.setItem(\"accessCsrf\", response.accessCsrf);\r\n        toast({\r\n          title: \"ログインしました\",\r\n          position: \"top\",\r\n          status: \"success\",\r\n          isClosable: true,\r\n        });\r\n        // TODO:遷移先の変更\r\n        navigate(\"/\");\r\n      })\r\n      .catch(() => {\r\n        toast({\r\n          title: \"ログインに失敗しました\",\r\n          position: \"top\",\r\n          status: \"error\",\r\n          isClosable: true,\r\n        });\r\n      })\r\n  );\r\n\r\n  const props = { handleLogin };\r\n\r\n  return (\r\n    <>\r\n      <FormProvider {...methods}>\r\n        <Login {...props} />\r\n      </FormProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginContainer;\r\n","import {\r\n  Input,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  Link,\r\n  Flex,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Text,\r\n  CloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { Link as ReactRouterLink } from \"react-router-dom\";\r\nimport { MdClose, MdHome, MdLogout, MdMenu, MdSearch } from \"react-icons/md\";\r\nimport Icon from \"../atoms/Icon\";\r\n\r\ntype AppbarProps = {\r\n  handleLogout: () => void;\r\n};\r\n\r\nconst Appbar: React.FC<AppbarProps> = ({ handleLogout }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent={\"space-between\"}\r\n      alignItems={\"center\"}\r\n      p={4}\r\n      h={20}\r\n      bg=\"teal.300\"\r\n      w={\"100vw\"}\r\n      position={\"fixed\"}\r\n    >\r\n      <Button\r\n        colorScheme=\"teal\"\r\n        onClick={() => {\r\n          setIsOpen(true);\r\n        }}\r\n      >\r\n        <Icon icon={MdMenu} />\r\n      </Button>\r\n      {/* メニュー */}\r\n      {/* TODO: アンマウント時のアニメーション追加 */}\r\n      {isOpen && (\r\n        <Drawer\r\n          isOpen={isOpen}\r\n          placement=\"left\"\r\n          onClose={() => {\r\n            setIsOpen(false);\r\n          }}\r\n        >\r\n          <DrawerOverlay />\r\n          <DrawerContent>\r\n            <DrawerHeader display={\"flex\"} justifyContent={\"right\"} p={2}>\r\n              <CloseButton\r\n                onClick={() => {\r\n                  setIsOpen(false);\r\n                }}\r\n              >\r\n                <Icon icon={MdClose} />\r\n              </CloseButton>\r\n            </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <Flex\r\n                direction={\"column\"}\r\n                justifyContent={\"center\"}\r\n                alignItems={\"center\"}\r\n                textAlign={\"center\"}\r\n                gap={1}\r\n              >\r\n                <InputGroup>\r\n                  <InputLeftElement pointerEvents=\"none\">\r\n                    <Icon icon={MdSearch} />\r\n                  </InputLeftElement>\r\n                  <Input placeholder=\"検索\" mb={2} />\r\n                </InputGroup>\r\n                <Link\r\n                  display={\"Flex\"}\r\n                  alignItems={\"center\"}\r\n                  w={\"100%\"}\r\n                  pl={1}\r\n                  h={12}\r\n                  _hover={{ bg: \"gray.100\" }}\r\n                  as={ReactRouterLink}\r\n                  to=\"/\"\r\n                >\r\n                  <Flex gap={3}>\r\n                    <Icon icon={MdHome} />\r\n                    <Text>ホーム</Text>\r\n                  </Flex>\r\n                </Link>\r\n                <Link\r\n                  display={\"Flex\"}\r\n                  alignItems={\"center\"}\r\n                  w={\"100%\"}\r\n                  h={12}\r\n                  pl={1}\r\n                  _hover={{ bg: \"gray.100\" }}\r\n                  as={ReactRouterLink}\r\n                  to=\"/\"\r\n                >\r\n                  <Flex gap={3}>\r\n                    <Icon icon={MdHome} />\r\n                    <Text>どっか</Text>\r\n                  </Flex>\r\n                </Link>\r\n                <Link\r\n                  display={\"Flex\"}\r\n                  alignItems={\"center\"}\r\n                  w={\"100%\"}\r\n                  h={12}\r\n                  pl={1}\r\n                  _hover={{ bg: \"gray.100\" }}\r\n                  as={ReactRouterLink}\r\n                  to=\"/\"\r\n                >\r\n                  <Flex gap={3}>\r\n                    <Icon icon={MdHome} />\r\n                    <Text>異次元</Text>\r\n                  </Flex>\r\n                </Link>\r\n              </Flex>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter></DrawerFooter>\r\n          </DrawerContent>\r\n        </Drawer>\r\n      )}\r\n      <Button\r\n        leftIcon={<Icon icon={MdLogout} />}\r\n        colorScheme=\"blue\"\r\n        onClick={handleLogout}\r\n      >\r\n        ログアウト\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Appbar;\r\n","import { useToast } from \"@chakra-ui/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Appbar from \"../components/organisms/appbar\";\r\nimport { useInternalApi } from \"../hooks/useInternalApi\";\r\n\r\nconst AppbarContainer: React.FC = () => {\r\n  const { _post } = useInternalApi();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n\r\n  const handleLogout = () =>\r\n    _post(\"/auth/logout\", {}).then((response: any) => {\r\n      localStorage.removeItem(\"accessCsrf\");\r\n      toast({\r\n        title: \"ログアウトしました\",\r\n        position: \"top\",\r\n        status: \"success\",\r\n        isClosable: true,\r\n      });\r\n      navigate(\"/login\");\r\n    });\r\n\r\n  const props = {\r\n    handleLogout,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Appbar {...props} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppbarContainer;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Outlet, useNavigate } from \"react-router-dom\";\r\nimport { useInternalApi } from \"../../hooks/useInternalApi\";\r\nimport AppbarContainer from \"../appbarContainer\";\r\n\r\nconst PrivateRoute: React.FC = () => {\r\n  const { _post } = useInternalApi();\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // HACK: 上手くいっているか不明なので要検討\r\n  useEffect(() => {\r\n    const jwtCheck = () =>\r\n      _post(\"/auth\")\r\n        .catch(() => {\r\n          navigate(\"/login\");\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    jwtCheck();\r\n  }, []);\r\n\r\n  // TODO: Loadingの画面を検討\r\n  if (isLoading) return <></>;\r\n\r\n  return (\r\n    <>\r\n      <AppbarContainer />\r\n      {/* Appbarのサイズ分コンテンツを下に */}\r\n      <Box pt={20}>\r\n        <Outlet />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nconst theme = extendTheme({\r\n  components: {\r\n    Drawer: {\r\n      variants: {\r\n        alwaysOpen: {\r\n          parts: [\"dialog, dialogContainer\"],\r\n          dialog: {\r\n            pointerEvents: \"auto\",\r\n          },\r\n          dialogContainer: {\r\n            pointerEvents: \"none\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import \"./App.css\";\r\nimport { ChakraProvider, Box } from \"@chakra-ui/react\";\r\nimport KanbanContainer from \"./container/kanban/kanbanContainer\";\r\nimport AuthContainer from \"./container/login/loginContainer\";\r\nimport { Suspense } from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport PrivateRoute from \"./container/auth/privateRoute\";\r\nimport { AuthProvider } from \"./hooks/useAuth\";\r\nimport { ApiProvider } from \"./hooks/useInternalApi\";\r\nimport theme from \"./theme\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider theme={theme} resetCSS={true}>\r\n      <AuthProvider>\r\n        <ApiProvider>\r\n          <Router>\r\n            {/* TODO: Loadingコンポーネントの作成 */}\r\n            <Suspense fallback={<p>loading...</p>}>\r\n              <Routes>\r\n                <Route path=\"/login\" element={<AuthContainer />} />\r\n                <Route path=\"/\" element={<PrivateRoute />}>\r\n                  <Route path=\"/\" element={<KanbanContainer />} />\r\n                </Route>\r\n                <Route path=\"*\" element={<p>Not Found</p>} />\r\n              </Routes>\r\n            </Suspense>\r\n          </Router>\r\n        </ApiProvider>\r\n      </AuthProvider>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst container = document.getElementById(\"root\");\r\n\r\nconst root = ReactDOM.createRoot(container)\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  \r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}